package com.example.smartapp.ui

import android.app.Activity
import android.content.Context
import android.net.wifi.WifiManager
import android.text.format.Formatter
import com.example.smartapp.R
import com.example.smartapp.listener.DialogListener
import com.example.smartapp.socket.ServerHandler
import com.example.smartapp.ui.dashboard.DashboardActivity.Companion.IS_CONNECTED_TO_DEVICE_HOTSPOT
import com.example.smartapp.utils.AppConstants
import com.example.smartapp.utils.AppConstants.DIALOG_LOCATION_ENABLE
import com.example.smartapp.utils.AppConstants.IP_4TH_VALUE
import com.example.smartapp.utils.AppConstants.OPTION_CANCEL
import com.example.smartapp.utils.checkLocation
import com.example.smartapp.utils.getPortFromUrl
import com.example.smartapp.utils.getSchemeFromUrl
import com.example.smartapp.utils.showCustomDialog
import com.example.smartapp.utils.showProgressDialog
import com.example.smartapp.utils.showToast
import okhttp3.WebSocket

class ServerConnection(val context: Context): DialogListener {

    //  private var socket: Socket?=null
    private var webSocket: WebSocket?=null
    private  var wifiManager: WifiManager? = null

    fun performServerConnection(){
        if(checkLocation(context as Activity, this)) {
            val socketUrlToConnect = getModifiedIp()
            println(">>>> Modified- IP Address: $socketUrlToConnect")

            if (!socketUrlToConnect.isNullOrEmpty()) {
                showToast(context, socketUrlToConnect)
                connectToWebSocket(socketUrlToConnect)
            } else {
                showToast(context, "An error occurred.Please try again later.")
            }
        }
    }

    private  fun getModifiedIp() :String?{
        val ipAddress =  getWifiIpAddress(context)
        println(">>>> Fetched- IP Address: $ipAddress")

        ipAddress?.let {
            // We are modifying our default SOCKET URL tp Pure ip address like '192.168.4.1'.
            var socketUrl =  AppConstants.SOCKET_URL.replace("ws://","")
            socketUrl =  socketUrl.replace("http://","")
            socketUrl =  socketUrl.replace(":8080","")
            println(">>>> To Match-  IP Address: $socketUrl")

            // Comparing the Modified Pure IP i.e socketUrl and IP Address of the connected WIFI..
            // We are doing this to ensure that we are connected to our Controller hotspot only.
            IS_CONNECTED_TO_DEVICE_HOTSPOT = ipAddress == socketUrl

            if (ipAddress == socketUrl){
                // it means mobile is connected to hotspot generated by hardware device.
                return AppConstants.SOCKET_URL
            }
            // it means mobile is connected to wifi of home. Hence changing 4th value of ip and making a server address from ip address.
            return  modifyIpAddress(ipAddress, IP_4TH_VALUE)
        }
        return  null
    }

    private fun getWifiIpAddress(context: Context): String? {
        wifiManager = context.getSystemService(Context.WIFI_SERVICE) as WifiManager
        val wifiInfo = wifiManager!!.connectionInfo
        val ip = wifiInfo.ipAddress
        return Formatter.formatIpAddress(ip)
    }

    //  Modifying IP Address of the WIFI of home. So changing 4th value of ip and making a server address from ip address.
    private fun modifyIpAddress(ipAddress: String, newFourthValue: String): String {
        // Split the IP address by "."
        val parts = ipAddress.split(".").toMutableList()

        // Check if it's a valid IP address with exactly 4 parts
        if (parts.size != 4) {
            throw IllegalArgumentException("Invalid IP address format")
        }

        // Replace the 4th part (index 3) with the new value
        parts[3] = newFourthValue

        // Join the parts back into a single string
        return getSchemeFromUrl(AppConstants.SOCKET_URL) +"://"+ parts.joinToString(".")+":"+ getPortFromUrl(AppConstants.SOCKET_URL)
    }


    private fun connectToWebSocket(socketUrlToConnect : String=""){
        showProgressDialog(context)


        //TODO: Comment this code before using below code i.e ServerHandler.setSocket()
        if(socketUrlToConnect.isNotEmpty()){
            ServerHandler.setSocket(socketUrlToConnect)
        }else{
            ServerHandler.setSocket()
        }

        //TODO: BELOW CODE is ONLY FOR TESTING
      //  ServerHandler.setSocket()

        webSocket = ServerHandler.webSocket

//       val data = SocketMessageModel(type = AppConstants.TYPE_WIFI_INFO, ssdId = "Rahul 5G", password = "123456")
//       val gson = Gson().toJson(data)
//        socket!!.emit(AppConstants.SOCKET_EVENT, gson)

//        webSocket!!.to(AppConstants.SOCKET_EVENT){ args ->
//            println(args[0])
//
//            if(args[0] !=null){
//                val value = args[0] as String
//                println("Value received: "+value)
//            }
//        }

    }



    override fun onOptionClick(optionType: String, others: Any, dialogType: String) {
        if(optionType == OPTION_CANCEL && dialogType == DIALOG_LOCATION_ENABLE){
            showCustomDialog(context as Activity, message = context.getString(R.string.denied_location_dialog_message)
                , showPositiveButton = false, showNegativeButton = true, negativeText = "OK")
        }
    }
}